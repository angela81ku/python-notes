# class structure
# class : we use the reserved word class
# Animal : we create a name for the class, Class names should normally use the CapWords convention. Forinstance: HoneyBee. 
# """ Docstrings """ : Describe how to use this class
# __init__(self,attr1,attr2....) :  is a reserved method in python classes. It is known as a constructor in object oriented concepts. This method called when an object is created from the class and it allow the class to initialize the attributes of a class.
# self : self represents the instance of the class. By using the "self" keyword we can access the attributes and methods of the class in python.
# self.nheight = height : this is instance variable actually, it can be written as "self.height = height", the nheight is just a name of this attribute, you can name it self.height as well.
# class variable within rabbit subclass, "tag", this would create different unique tag every time you create a new instance.
# get session : means you can get the input data
# set seesion : means you can change the input data
# __str__(self) : it's a dunder method or special methods, which means that you can apply certain the built-in function in your class. If you don't use this you can't print out the instance as you might imagine.
# Human(Animal) : Animal is the parent class/ superclass and Human Cat are  subclasses/child classes.Those subclasses all inherit the behaviors and data of the parents unless we explicitly override them.


# naming reference : https://www.python.org/dev/peps/pep-0008/#class-names
# more info of special methods : https://docs.python.org/3/reference/datamodel.html#notes-on-using-slots

class Animal:
    """
    Docstrings
    """
    def __init__(self, height, weight):
        self.nheight = height
        self.weight = weight
        self.name = None
    def get_height(self):
        return self.nheight
    def get_weight(self):
        return self.weight    
    def get_name(self):
        return self.name
    def set_height(self, newheight):
        self.nheight = newheight
    def set_weight(self, newweight):
        self.weight = newweight
    def set_name(self, newname = ""):
        self.name = newname
    def __str__(self):
        return 'Animal : {} is {} cm and {} kg'.format(self.name, self.nheight, self.weight)

class Cat(Animal):
    """
    Docstrings
    """
    tag = 1
    def __init__(self,height,weight,parent1=None,parent2=None):
        Animal.__init__(self,height,weight)
        self.parent1 = parent1
        self.parent2 = parent2
        if type(self.parent1) == Cat:
          self.parent1 = parent1
        else:
          self.parent1 = None
        if type(self.parent2) == Cat:
          self.parent2 = parent2 
        else:
          self.parent2 = None 
        self.rid = Cat.tag
        Cat.tag += 1
    def get_rid(self):
        return str(self.rid).zfill(3)
        # zfill(3) can create a three digit id such as 001 rather than just 1.
    def get_parent1(self):
        return self.parent1
    def get_parent2(self):
        return self.parent2
    def __add__(self, other):
        # returning object of same type as this class
        return Cat(0, 0, self, other)
    def speak(self):
        return 'Meow! '
    def __str__(self):
        return 'Cat : {} is {} cm and {} kg'.format(self.name, self.nheight, self.weight)
    def __eq__(self, other):
        parents_same = self.parent1.rid == other.parent1.rid \
                       and self.parent2.rid == other.parent2.rid
        parents_opposite = self.parent2.rid == other.parent1.rid \
                       and self.parent1.rid == other.parent2.rid
        return parents_same or parents_opposite  
class Human(Animal):
    """
    Docstrings
    """
    def __init__(self, height, weight):  
    # Animal.__init__(self, height, weight): means you want to inherit the parent class of the related methods, because when you do __init__, you overwrite the parents' init and you don't want to lose certain inherit.
    # If you perfectly inherit parent class then you don't need to do so, but in this case we add an attribute " set.friends"
        Animal.__init__(self, height, weight)
        Animal.set_name(self,newname ="")
        self.friends = []
    def get_friends(self):
        return self.friends
    def add_friends(self,n):
        if n not in self.friends:
            self.friends.append(n)
    def speak(self):
        return "I'm a human and I'm so pretty! "
    
    def __str__(self):
        return 'Human : {} is {} cm and {} kg'.format(self.name, self.nheight, self.weight)
        
        
        
angelina = Human(170,60)
angelina.set_height(169)
>>> 169
# This is bad to access value of the attribute: print(angelina.nheight)
# The following is better than the above.
print(angelina.get_height()) 
>>> 169
# Always write a method to store new attributes inside of it and to access using getters to get the attribute values that you want out there.
Human.get_height(angelina)
>>> 169
angelina.set_name("Angelina")
print(angelina)
>>> Human : Angelina is 169 cm and 60 kg
print(Animal.__str__(angelina))     
>>> Animal : Angelina is 169 cm and 60 kg

bubble = Cat(50,18)
bubble.speak()
>>>Meow!
angelina.speak()
>>>I'm a human and I'm so pretty! 
john = Animal(50,18)
john.speak()
>>> error

# Cat part
diamond = Cat(50,50)
diamond.set_name("Diamond")

kitten = Cat(45,30)
kitten.set_name("Kitten")

bubble = Cat(50,18,kitten,diamond)
purple = kitten + diamond
purple.set_name("purple")
bubble.set_name("Bubble")
print(bubble.get_parent1())
print(purple.get_parent1())
print(purple.get_parent2())
print(diamond.get_rid())
print(purple == bubble)



#different subclass use the same name of the method but would have different result.
The higher hierarchy of class can't access the method or attribute of the lower class.

# inherence example
class A(object):
    def __init__(self):
        self.a = 1
    def x(self):
        print("A.x")
    def y(self):
        print("A.y")
    def z(self):
        print("A.z")

class B(A):
    def __init__(self):
        A.__init__(self)
        self.a = 2
        self.b = 3
    def y(self):
        print("B.y")
    def z(self):
        print("B.z")

class C(object):
    def __init__(self):
        self.a = 4
        self.c = 5
    def y(self):
        print("C.y")
    def z(self):
        print("C.z")

class D(C, B):
    def __init__(self):
        C.__init__(self)
        B.__init__(self)
        self.d = 6
    def z(self):
        print("D.z")
obj = D()
print(obj.a)
>>> 2
# If    C.__init__(self),B.__init__(self) switch the order than the answer would be 4
# obj.a was defined in C.init, then overwritten by B.init so it was 4 for a moment it was 1 then it was 2. When you ask for it, there is no inheritance NONE .... why? because you already had that value from running the two inits as part of D's init.
print(obj.y())
>>> C.y
# If switch the order to class D(B, C): the answer would be B.y, it means that when you are call a method it would read through 
# obj.y was NOT defined as part of the init process so unlike a, it will have to be found by inheritance. So, left to right depth first. Look at C. Found it. Stop.

#Extended example

# if you don't define the following code __lt__(self, other) then the built-in function sort() can't work. (if you want to sort increasingly, use __gt__)

# -*- coding: utf-8 -*-
"""
Created on Wed May 18 07:51:28 2016

@author: ericgrimson
"""

import datetime

class Person(object):
    def __init__(self, name):
        """create a person called name"""
        self.name = name
        self.lastName = name.split(' ')[-1]

    def getLastName(self):
        """return self's last name"""
        return self.lastName
  
    def __lt__(self, other):
        """return True if self's name is lexicographically
           less than other's name, and False otherwise"""
        if self.lastName == other.lastName:
            return self.name < other.name
        return self.lastName < other.lastName
# example usage

p1 = Person('Mark Zuckerberg')
p1.setBirthday(5,14,84)
p2 = Person('Drew Houston')
p2.setBirthday(3,4,83)
p3 = Person('Bill Gates')
p3.setBirthday(10,28,55)
p4 = Person('Travis Kalanik')
p5 = Person('Steve Wozniak')


personList = [p1, p2, p3, p4, p5]
   
personList.sort()

